name: Validate Application

on:
  pull_request:
    paths:
      - 'applications/2025/pending/*.yml'
    types:
      - opened
      - synchronize
      - reopened

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml jsonschema
      
      - name: Get changed files
        id: changed-files
        run: |
          # Get list of changed application files
          echo "Checking for application files in PR..."
          
          # Get changed files between base and head
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep "applications/2025/pending/.*\.yml$" || true)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "❌ No application files found in this PR"
            exit 1
          fi
          
          echo "Found application files:"
          echo "$CHANGED_FILES"
          
          # Count number of application files
          FILE_COUNT=$(echo "$CHANGED_FILES" | wc -l)
          echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT
          
          # Get the first file for validation
          FIRST_FILE=$(echo "$CHANGED_FILES" | head -n 1)
          echo "first_file=$FIRST_FILE" >> $GITHUB_OUTPUT
          
          # Extract username from filename
          USERNAME=$(basename "$FIRST_FILE" .yml)
          echo "username=$USERNAME" >> $GITHUB_OUTPUT
      
      - name: Check single application per PR
        run: |
          if [ "${{ steps.changed-files.outputs.file_count }}" -gt 1 ]; then
            echo "❌ Error: Multiple application files detected!"
            echo "Please submit only one application per pull request."
            exit 1
          fi
      
      - name: Validate YAML syntax
        run: |
          echo "📋 Validating YAML syntax..."
          python -c "
          import yaml
          import sys
          
          try:
              with open('${{ steps.changed-files.outputs.first_file }}', 'r') as f:
                  data = yaml.safe_load(f)
              print('✅ YAML syntax is valid')
          except yaml.YAMLError as e:
              print(f'❌ YAML syntax error: {e}')
              sys.exit(1)
          "
      
      - name: Validate application format
        id: validate
        run: |
          echo "🔍 Validating application requirements..."
          
          # Create a simple validation script inline
          cat > validate_temp.py << 'EOF'
          import yaml
          import sys
          import re
          import os
          
          def validate_application(file_path):
              errors = []
              warnings = []
              
              try:
                  with open(file_path, 'r') as f:
                      data = yaml.safe_load(f)
              except Exception as e:
                  errors.append(f"Failed to parse YAML: {e}")
                  return errors, warnings
              
              # Check required sections
              required_sections = ['essentials', 'genai_mastery', 'tech_stack_alignment', 
                                 'shipping_velocity', 'availability']
              for section in required_sections:
                  if section not in data or data[section] is None:
                      errors.append(f"Missing required section: {section}")
              
              # Check essential fields
              if 'essentials' in data and data['essentials']:
                  essentials = data['essentials']
                  required_fields = ['github_username', 'email', 'full_name']
                  for field in required_fields:
                      if not essentials.get(field):
                          errors.append(f"Missing required field: essentials.{field}")
                  
                  # Validate email format
                  email = essentials.get('email', '')
                  email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
                  if email and not re.match(email_pattern, email):
                      errors.append("Invalid email format")
                  
                  # Validate GitHub username format
                  username = essentials.get('github_username', '')
                  username_pattern = r'^[a-zA-Z0-9](?:[a-zA-Z0-9]|-(?=[a-zA-Z0-9])){0,38}$'
                  if username and not re.match(username_pattern, username):
                      errors.append("Invalid GitHub username format")
                  
                  # Check file naming
                  expected_filename = f"{username}.yml"
                  actual_filename = os.path.basename(file_path)
                  if actual_filename != expected_filename:
                      errors.append(f"File should be named: {expected_filename}")
              
              # Check GenAI section
              if 'genai_mastery' in data and data['genai_mastery']:
                  if not data['genai_mastery'].get('primary_tools'):
                      warnings.append("No AI tools listed - this will significantly impact your score")
              
              # Check availability
              if 'availability' in data and data['availability']:
                  if not data['availability'].get('start_date'):
                      errors.append("Missing required field: availability.start_date")
                  if not data['availability'].get('commitment_level'):
                      errors.append("Missing required field: availability.commitment_level")
              
              return errors, warnings
          
          # Run validation
          file_path = sys.argv[1]
          errors, warnings = validate_application(file_path)
          
          if errors:
              print("❌ Validation Failed!\n")
              print("Errors:")
              for error in errors:
                  print(f"  - {error}")
              if warnings:
                  print("\nWarnings:")
                  for warning in warnings:
                      print(f"  - {warning}")
              sys.exit(1)
          else:
              print("✅ Validation Passed!")
              if warnings:
                  print("\nWarnings:")
                  for warning in warnings:
                      print(f"  ⚠️  {warning}")
          EOF
          
          python validate_temp.py "${{ steps.changed-files.outputs.first_file }}"
          
          # Clean up
          rm validate_temp.py
      
      - name: Check PR title format
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Checking PR title: $PR_TITLE"
          
          # Check if title contains username
          if [[ ! "$PR_TITLE" =~ ${{ steps.changed-files.outputs.username }} ]]; then
            echo "⚠️  PR title should include your GitHub username"
          fi
      
      - name: Auto-label PR
        uses: actions/github-script@v6
        with:
          script: |
            // Add application label
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['application', 'pending-review']
            });
      
      - name: Comment validation success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const username = '${{ steps.changed-files.outputs.username }}';
            
            const comment = `### ✅ Application Validation Successful!
            
            Thank you for applying to the **Ship-Every-Friday Squad**, @${username}! 
            
            Your application has passed initial validation. Here's what happens next:
            
            1. 🤖 **Automated Analysis** - Our bot will analyze your GitHub profile (this may take a few minutes)
            2. 📊 **Scoring** - You'll receive a detailed score based on:
               - GenAI tool usage (50%)
               - Open source contributions (30%)
               - Project quality (10%)
               - GitHub activity (5%)
               - Production readiness (5%)
            3. 👀 **Review** - Our team will review your application
            4. 🚀 **Decision** - We'll get back to you within 5 business days
            
            **Note**: Thanks to CODEOWNERS, a reviewer has been automatically assigned to your PR.
            
            Good luck! 🍀
            
            ---
            *If you need to update your application, just push new commits to this PR.*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: Comment validation failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const comment = `### ❌ Application Validation Failed
            
            There are some issues with your application that need to be fixed.
            
            Please check the workflow logs above for specific errors and:
            1. Fix the identified issues
            2. Push the corrected file to this PR
            
            Common issues:
            - Missing required fields
            - Invalid email format
            - Incorrect file naming (should be \`your-github-username.yml\`)
            - YAML syntax errors
            
            Need help? Check out our [application guide](https://github.com/${{ github.repository }}/blob/main/HOW_TO_APPLY.md).
            
            ---
            *The validation will run again automatically when you push updates.*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: Set PR status check
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const description = state === 'success' 
              ? 'Application validation passed' 
              : 'Application validation failed - check errors';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              context: 'Application Validation',
              description: description,
              target_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            });
